\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename LibreDWG.info
@include version.texi
@settitle LibreDWG @value{VERSION}

@c Combine everything into one index (arbitrarily chosen to be the
@c concept index).
@syncodeindex vr cp
@syncodeindex fn cp
@c %**end of header

@copying
This manual is for GNU LibreDWG (version @value{VERSION}, @value{UPDATED}).

Copyright @copyright{} 2010, 2015, 2018 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory Libraries
@direntry
* LibreDWG: (LibreDWG).         Free implementation of the DWG file format.
@end direntry

@titlepage
@title GNU LibreDWG
@subtitle for version @value{VERSION}, @value{UPDATED}
@c Hey, if you can change this, you can comment in the next line!
@author GNU LibreDWG Developers
@author and Thien-Thi Nguyen
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents


@ifnottex
@node Top
@top GNU LibreDWG

@insertcopying
@end ifnottex

@menu
* Overview::            General purpose and information.
* Usage::               How to use LibreDWG.
* Types::               Enums, structs.
* Functions::           Call them.
* Programs::            Useful binaries.
* Reference API::

* Reporting bugs::      Sending bug reports and feature suggestions.
* GNU Free Documentation License:: Copying and sharing this documentation.
* Index::
@end menu


@node Overview
@chapter Overview

@cindex overview
@cindex dwg file format
@cindex license

LibreDWG is a free C library to read and write @dfn{DWG files}.
The DWG file format was created in the 1970s for the then-emerging
CAD applications.

This library is part of the GNU project, released under the aegis of
GNU.  It is made available under GPLv3+, i.e., under the terms of the
GNU General Public License version 3, or (at your option) any later
version.

It came out of code from the QCad Community Edition product from
Ribbonsoft.

@section API/ABI version

@cindex version, API/ABI

LibreDWG @value{VERSION} provides the API/ABI version 1.
We hope that this doesn't need to change much in the future.
@ignore
In the past, these were released:

@table @code
@c [???] For first release, there is no history.  However, might me want
@c to describe the difference between LibreDWG and LibDWG here?  --ttn
@item 0
...
@end table
@end ignore

@section Coverage

@cindex coverage

Because the DWG file format is not open, its specification had to be
reverse-engineered.  The specification is almost complete.
The LibreDWG implementation of the specification is an ongoing process;
as of version @value{VERSION}, coverage is approximately 99%.

It can read the formats R13, R14, R2000, R2004, and R2007 for 99%.
R2010, R2013 and R2018 can be partially read (~90%), but fail on some advanced DWG's.
R11 and earlier cannot be read yet, only partially.
Reading R11 and earlier is ony enabled with the development git checkout, not
the released tarball.

Here is a list of features that are still missing.

@cindex features, still missing

@table @asis

@item Reading pre-R13 and R2010+ DWG
Reading DWG formats for pre-R13 and some R2010+ objects is an ongoing effort, some minor parts are missing. Simple DWGs can be read already, advanced DWGs not.

Missing:

* PROXY subentities, PROXY_ENTITY

* CELLSTYLEMAP TABLE_Cell struct

Halfway:

* MATERIAL

* SPATIAL_INDEX class/object untested

* WIPEOUTVARIABLES class/object untested

* ACIS: only converted to a raw string

@item Writing pre-R13 and R2004+ DWG
Writing DWG formats for R2004 and later: R2007, R2010, R2013, R2018 is an
ongoing effort and not yet implemented.

@item Reading and writing ASCII and binary DXF
DXF support is an ongoing effort, and about halfway implemented.
Ascii DXF's are generated fully, with much more elements and fields and other free libraries,
but AutoCAD fails to import them yet.
Binary DXF are done about 50%.
Reading DXF is not yet fully implemented, this is under construction.

@end table

See also the @file{TODO} file in the source distribution.

@section Related projects

@cindex projects, related

Some projects that use DWG (and specifically LibreDWG) are:

@table @asis
@item GRASS GIS
http://grass.osgeo.org/
@end table

Related libraries:

@table @asis
@item libdwg
The old version (documented in Esperanto) which was forked to LibreDWG in 2009.
But in the meantime it got a DXF reader.
@item libdxfrw
Read the DWG format for all versions but with much less elements, only those needed for DXF.
Written in C++, under the GPLv2 license.
@item libopencad
Read the R2000 DWG format.
Written in C++, under the GPLv2 license.
@item OpenDWG
The OpenDWG's license does not allow the usage in free software projects.
@end table

Compared to libdwg, libdxfrw and libopencad, LibreDWG can read and
write much more details. Which is especially important for attached links
and data from third party applications: BIM, MAP, GIS, ..., 
and for dynamic parametric constraints.

@node Usage
@chapter Usage

@cindex header
@cindex compilation
@cindex linking

This chapter describes how to compile and link a program against
LibreDWG.  To access LibreDWG interface elements (@pxref{Types},
@pxref{Functions}), include its header file in the C code.

@example
#include <dwg.h>
@end example

Optionally you can also use the 
@example
#include <dwg_api.h>
@end example
API.

@noindent
Make sure you specify @samp{-lredwg} when linking,
such as in this @file{Makefile.am} fragment:

@example
AM_LDFLAGS += -lredwg
@end example

@noindent
Note that the shared object library is named @file{libredwg} (with some
system-specific extension, e.g., @file{.so}), so you do @strong{not}
want to specify @code{-llibredwg}, as that would (try to) link against
@file{liblibredwg} and fail.


@node Types
@chapter Types

@cindex data types
@cindex enums
@cindex structs

LibreDWG types map closely to the type system of the DWG file format.
This chapter describes the enums and structs used to define the single
DWG structure, which is passed around the functions x(@pxref{Functions}).

@deftypevr {define} BITCODE_RC char
1 raw signed char
@end deftypevr
@deftypevr {define} BITCODE_RS short
1 raw unsigned short int
@end deftypevr
@deftypevr {define} BITCODE_RL long
1 raw unsigned long int
@end deftypevr
@deftypevr {define} BITCODE_RD double
1 raw IEEE-754 double
@end deftypevr
@deftypevr {define} BITCODE_B byte
1 bit
@end deftypevr
@deftypevr {define} BITCODE_BB byte
2 bits
@end deftypevr
@deftypevr {define} BITCODE_3B byte
1-3 bits
@end deftypevr
@deftypevr {define} BITCODE_4BITS byte
4 bits (for VIEW view_mode)
@end deftypevr
@deftypevr {define} BITCODE_BS short
1 bit-encoded unsigned short
@end deftypevr
@deftypevr {define} BITCODE_BL long
1 bit-encoded unsigned long
@end deftypevr
@deftypevr {define} BITCODE_BLL uint64_t
1 bit-encoded unsigned 64bit long
@end deftypevr
@deftypevr {define} BITCODE_BD double
1 bit-encoded double
@end deftypevr
@deftypevr {define} BITCODE_DD double
1 bit-encoded double with default
@end deftypevr
@deftypevr {define} BITCODE_MC long int
1-4 modular chars
@end deftypevr
@deftypevr {define} BITCODE_UMC long unsigned int
1-4 unsigned modular chars
@end deftypevr
@deftypevr {define} BITCODE_MS long unsigned int
1 modular short, max 2 words
@end deftypevr
@deftypevr {define} BITCODE_BE double[3]
1 bitencoded extrusion vector
@end deftypevr
@deftypevr {define} BITCODE_BT double
1 bitencoded thickness value
@end deftypevr
@deftypevr {define} BITCODE_TV char*
length + ASCIIZ string
@end deftypevr
@deftypevr {define} BITCODE_H void*
handle-references
@end deftypevr
@deftypevr {define} BITCODE_L long int
1 raw LE-encoded long
@end deftypevr
@deftypevr {define} BITCODE_CMC double[4]
1 encoded Dwg_Color struct
@end deftypevr
[and some more]

@cindex return code
@cindex code, return
@cindex error code
@cindex code, error

Two types that do not derive from the type system of the DWG file format
are the enums for return codes and error codes.

Esp. on 32-bit and windows systems ensure that you define
@code{HAVE_STDINT_H} and @code{HAVE_INTTYPES_H} before including
@file{dwg.h} to use the proper C99 @code{int32_t},... types, and not
just the native fallback types int/long, which are different across
platforms.  Or include @file{<stdint.h>} and @file{<inttypes.h>} by
your own before @file{dwg.h}.
With the GNU autotools this usually happens automatically.

@node Functions
@chapter Functions

@cindex functions

You can use LibreDWG immediately upon loading, without any particular
initialization. Only when using some @b{dwg_api} functions you might need to
initialize the version via @code{dwg_api_init_version(&dwg)}, when you
need other formats than r2000 and you call an API function which does
not store the version internally. Most do.

You usually use one set of functions - either decoding or encoding -
at a time.  All functions use the common data types (@pxref{Types}).

@menu
* Decoding::                    Functions on the DWG read path.
* Encoding::                    Functions on the DWG write path.
* Other Formats::		Functions on the DWG to read or write other formats.
@end menu


@node Decoding
@section Decoding

@cindex functions, decoding
@cindex functions, read path

The highest level function for decoding a file is @strong{@code{dwg_read_file}}.

@deftypefn {Function} int dwg_read_file (char *@var{filename}, Dwg_Data *@var{dwg})
Open @var{filename} and decode it, saving information into @var{dwg}.
Return 0 if successful.
@end deftypefn

You can then iterate over the entities in model space or paper space
via two ways:

1. by using the @file{dwg.h} data structures. Via @code{dwg->object[0]}, which is of
   type @code{Dwg_Object_BLOCK_CONTROL},
   and a custom @code{void process_BLOCK_HEADER((Dwg_Object_Ref* ref)}:

@verbatim
  Dwg_Object_BLOCK_CONTROL* block_control = dwg->object[0]->tio.object->tio.BLOCK_CONTROL;

  // optional
  for (i=0; i < block_control->num_entries; i++)
    {
      process_BLOCK_HEADER(block_control->block_headers[i]);
    }

  process_BLOCK_HEADER(block_control->model_space);
  process_BLOCK_HEADER(block_control->paper_space);
@end verbatim

or 2. by using the API functions from @file{dwg_api.h}:

@verbatim
  int error;
  dwg_obj_block_header *hdr = dwg_get_block_header(dwg, &error);
  dwg_obj_block_control *ctrl = dwg_block_header_get_block_control(hdr, &error);

  // optional
  dwg_object_ref **hdr_refs = dwg_obj_block_control_get_block_headers(ctrl, &error);
  long num_hdr_objs = dwg_obj_block_control_get_num_entries(ctrl, &error);
  for (i=0; i < num_hdr_objs; i++)
    {
      process_BLOCK_HEADER(hdr_refs[i]);
    }

  process_BLOCK_HEADER(dwg_obj_block_control_get_model_space(ctrl, &error));
  process_BLOCK_HEADER(dwg_obj_block_control_get_paper_space(ctrl, &error));
@end verbatim

and inside the @code{process_BLOCK_HEADER} function, you iterate over the objects
from the header ref via:

@verbatim
  Dwg_Object_BLOCK_HEADER* hdr = ref->obj->tio.object->tio.BLOCK_HEADER;
  Dwg_Object* obj = get_first_owned_object(ref->obj, hdr);
  while (obj)
    {
      process_object(obj);
      obj = get_next_owned_object(ref->obj, obj, hdr);
    }
@end verbatim

where @code{process_object} checks the type of each object or entity under the
@var{Dwg_Object* obj}.

@node Encoding
@section Encoding

@cindex functions, encoding
@cindex functions, write path

Encoding DWG files is optional and needs to be enabled with
@code{./configure --enable-write}.

The highest level function for encoding a bitstream to a file is @code{dwg_write_file}.

@deftypefn {Function} int dwg_write_file (char *@var{filename}, Dwg_Data *@var{dwg})
Open @var{filename} and write the @var{dwg} to it.
Return 0 if successful.
@end deftypefn

The iterator is similar to above, but you want to encode all data structures, not just the
entities.

@node Other Formats
@section Other Formats

@cindex functions, other formats

@menu
* DXF::                    Write (and soon read) ASCII DXF
* DXFB::                   Write (and soon read) Binary DXF.
* JSON::		   Write and read our own JSON serialization of the DWG
* GeoJSON::		   See the GeoJSON spec
@end menu

@node DXF
@subsection DXF

@cindex DXF, ASCII DXF

We can write Ascii DXF files in various versions, with much more data than other free
DWG libraries, but not as stable as the unfree Teigha library yet.
AutoCAD fails to import our files still.

Options: @code{--minimal} (see @code{dwg2dxf} or @code{dwgread}) creates
only a short header with a ACADVER and HANDSEED element, and the
entities, without any subclass markers, reactors or handles.

Reading DXF is under construction.

@node DXFB
@subsection DXFB

@cindex DXFB, Binary DXF

We can almost write Binary DXF files in various versions. Under Construction.

Reading DXF is under construction.

@node JSON
@subsection JSON

@cindex JSON

We write and read to our own JSON format, which is a readable 1:1 mapping of the DWG structures, and carries much more information than the DXF format.

Writing a JSON to stdout is not recommended, as then ending commas are
still there, which is strictly not valid JSON.

@node GeoJSON
@subsection GeoJSON

@cindex GeoJSON

Work is ongoing to write to the GeoJSON format as specified at @uref{http://geojson.org/geojson-spec.html}.
See @code{dwgread} with the @code{--fmt GeoJSON} option.

@node Programs
@chapter Programs

@cindex programs

LibreDWG installs some binary programs to read or write DWG files.

@table @asis

@item @file{dwgread}
@cindex dwgread

This reads a DWG file, and optionally converts its content to some output formats: JSON, GeoJSON, DXF, DXFB (i.e. Binary DXF).

@code{dwgread [OPTION]... DWGFILE}

Options:

       -v[0-9], --verbose [0-9]
              verbosity

       -O fmt,  --format fmt
              fmt: JSON, DXF, DXFB, GeoJSON

              Planned formats: YAML, XML/OGR, GPX, SVG, PS

       -o outfile
              also defines the output fmt. Default: stdout

       --help display this help and exit

       --version
              output version information and exit

Currently the options need to be specified in this exact same order.

@item @file{dwgwrite}
@cindex dwgwrite

Create a DWG from a given input file (@pxref{JSON}, @pxref{DXF}, @pxref{DXFB, Binary DXF}),
optionally via @code{--as-rNNNN} as another version. Experimental.
For now can only create R2000 DWG files.

@item @file{dwgrewrite}
@cindex dwgrewrite

Read and write the DWG, optionally via @code{--as-rNNNN} as another
version, an earlier or later version.

@item @file{dwglayers}
@cindex dwglayers

Prints all layers in a DWG.
With @code{-f} or @code{--flags} also the status of frown, on/off and locked.
With @code{--on} only the visible layers, which are on and not frozen.

@item @file{dwg2SVG}
@cindex dwg2SVG
Convert a DWG to a limited SVG. All paperspace and modelspace enties of type:
TEXT, LINE, CIRCLE, ARC, INSERT.

@item @file{dwg2ps}
@cindex dwg2ps
Convert a DWG to a limited Postscript file. All paperspace and modelspace enties of type LINE.

@item @file{dwg2dxf}
@cindex dwg2dxf

Convert a DWG to DXF, optionally via @code{--as-rNNNN} as another
version, an earlier or later version, or via @code{-m} or
@code{--minimal} as a minimal DXF version, skipping most headers vars,
classes, tables and objects.
@code{--binary} as a binary DXF file, with full precision.
Some parts of the DXF writers are not yet implemented.

@item @file{dxf2dwg}
@cindex dxf2dwg

Convert a DXF (or Binary DXF) to DWG, optionally via @code{--as-rVER} as another
version, an earlier or later version.
The DXF reader is not yet implemented.

@end table

There are also some more examples in the source distribution:

@file{load_dwg} loads a DWG and adds some entities.
@cindex load_dwg

@file{dwg2svg2} converts a DWG to SVG similar to @file{dwg2SVG},
but via the @file{dwg_api.h} only.
@cindex dwg2svg2

@node Reference API
@chapter Reference API

@cindex Reference API

See the seperate @uref{../refman/index.html, refman} manual (in pdf or html format, the pdf has ~1800 pages) for a detailled API description, or see the relevant @file{dwg.h}, @file{dwg_api.h} or the @file{*.spec} files.

For reference you might also want to check the public AutoCAD DXF reference manuals,
and the @file{OpenDesign_Specification_for_dwg_files}.

@comment It is unfortunately not possible to include the doxygen generated tex
@comment files into this texinfo format.

@node Reporting bugs
@chapter Reporting bugs

@cindex bug reporting
@cindex problems
@cindex reporting bugs

To report bugs or suggest enhancements for GNU LibreDWG, please
``submit a bug'' at
@uref{http://savannah.gnu.org/projects/libredwg, Savannah}
or send electronic mail to @email{libredwg@@gnu.org}.
(If you use the web interface, you don't need to also send email,
since that is done automatically.)
Pull requests at the github mirror at 
@uref{http://github.org/rurban/libredwg, Github} are also accepted for now.

@cindex checklist for bug reports
For bug reports, please include enough information for the maintainers
to reproduce the problem.  Generally speaking, that means:

@itemize @bullet
@item The version numbers of LibreDWG and any other program(s) or manual(s) involved.
@item Hardware and operating system names and versions.
@item The contents of any input files necessary to reproduce the bug.
@item The expected behavior and/or output.
@item A description of the problem and samples of any erroneous output.
@item Options you gave to @command{configure} other than specifying
      installation directories.
@item Anything else that you think would be helpful.
@end itemize

When in doubt whether something is needed or not, include it.  It's
better to include too much than to leave out something important.

@cindex patches, contributing
Patches are welcome; if possible, please make them with
@samp{git format-patch} and
include @file{ChangeLog} entries (@pxref{Change Log,,, emacs, The GNU
Emacs Manual}).  Please follow the existing GNU coding conventions.
See @file{CONTRIBUTING} in the source distribution.

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi
@include version.texi

@node Index
@unnumbered Index

@printindex cp

@bye

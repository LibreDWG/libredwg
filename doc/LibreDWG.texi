\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename LibreDWG.info
@include version.texi
@settitle LibreDWG @value{VERSION}

@c Use 2 indices, cp (with fn and pg), and vr for the rest (mostly included).
@c @syncodeindex vr cp
@synindex fn cp
@synindex tp cp
@synindex pg cp
@c %**end of header

@copying
This manual is for GNU LibreDWG (version @value{VERSION}, @value{UPDATED}).

Copyright @copyright{} 2010-2020 Free Software Foundation, Inc.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@dircategory Libraries
@direntry
* LibreDWG: (LibreDWG).         Free implementation of the DWG file format.
@end direntry

@titlepage
@title GNU LibreDWG
@subtitle for version @value{VERSION}, @value{UPDATED}
@c Hey, if you change this, you can comment in the next lines
@author GNU LibreDWG Developers
@author and Thien-Thi Nguyen
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents


@ifnottex
@node Top
@top GNU LibreDWG

@insertcopying
@end ifnottex

@menu
* Overview::            General purpose and information.
* Usage::               How to use LibreDWG.
* Types::               Common types, enums, structs.
* Objects::             All supported objects and entities.
* Structures::          Special structures.
* Functions::           Call them.
* Errors::              Error levels.
* Programs::            Included binaries.
* Bindings::            Bindings to other languages.
* Reference API::

* Reporting bugs::      Sending bug reports and feature suggestions.
* GNU Free Documentation License:: Copying and sharing this documentation.
* Index::
@end menu


@node Overview
@chapter Overview

@cindex overview
@cindex dwg file format
@cindex license

LibreDWG is a free C library to read and write @dfn{DWG files}.
The DWG file format was created in the 1970s for the then-emerging
CAD applications.

This library is part of the GNU project, released under the aegis of
GNU.  It is made available under GPLv3+, i.e., under the terms of the
GNU General Public License version 3, or (at your option) any later
version.

It came out of code from the QCad Community Edition product from
Ribbonsoft.

@section API/ABI version

@cindex version, API/ABI

LibreDWG @value{VERSION} provides the API/ABI version 1.
We hope that this doesn't need to change much in the future.

See @file{include/dwg.h} for @code{LIBREDWG_VERSION_MAJOR}, 
@code{LIBREDWG_VERSION_MINOR} and @code{LIBREDWG_SO_VERSION}.

@ignore
In the past, these were released:

@table @code
@c [???] For first release, there is no history.  However, might me want
@c to describe the difference between LibreDWG and LibDWG here?  --ttn
@item 0
...
@end table
@end ignore

@section Coverage

@cindex coverage

Because the DWG file format is not open, its specification had to be
reverse-engineered.  The specification is almost complete.
The LibreDWG implementation of the specification is an ongoing process;
as of version @value{VERSION}, coverage is approximately 99%.

It can read the formats R13, R14, R2000, R2004, R2007, R2010, R2013 and R2018
for 99%.
R11 and earlier cannot be read yet, only partially.
Reading R11 and earlier is only enabled with the development git checkout, not
the released tarball.

Here is a list of features that are still missing.

@cindex features, still missing

@table @asis

@item Reading pre-R13 DWG
Reading DWG formats for pre-R13 and some R2010+ non-graphical objects is an ongoing
effort, some minor parts are missing. Most DWG's can be read, some undocumented classes
are skipped.

* ACIS: version 1 is converted to a raw string. ACIS version 2, i.e. the forked variant ACIS 7.0 under the name ShapeManager, is dumped to a string containing the binary SAB format.

@item Writing pre-R13 and R2004+ DWG
Writing DWG formats for R2004 and later: R2007, R2010, R2013, R2018 is an
ongoing effort and not yet implemented. We write as default in the R2000 format only.

@item Reading binary DXF
DXF support is now mostly implemented.
ASCII DXF's are generated fully, with much more elements and fields and other free libraries,
but AutoCAD fails to import some of them. See the @file{TODO} file for a detailed coverage report.

Reading binary DXF is still under construction, done about 80%.

@item Enabled entities and objects, but unstable, undertested. Field names may change:

For a detailed overview see the files @file{TODO} or @file{src/classes.inc}.

  ASSOCDEPENDENCY ASSOCPLANESURFACEACTIONBODY GEODATA HELIX
  OBJECT_PTR PERSSUBENTMANAGER DIMASSOC MULTILEADER LIGHT
  DBCOLOR

@item Unhandled (fields spec'ed but broken/untested):

  MATERIAL CELLSTYLEMAP PROXY PROXY_ENTITY VBA_PROJECT
  PLOTSETTINGS SUN GEOPOSITIONMARKER *SURFACE MESH
  TABLECONTENT TABLEGEOMETRY TABLE (works only pre-2010).

Missing:

* PROXY subentities, PROXY_ENTITY

* CELLSTYLEMAP TABLE_Cell struct

Halfway:

  SUNSTUDY VBA_PROJECT ASSOCACTION ASSOCNETWORK
  ASSOCALIGNEDDIMACTIONBODY ASSOCOSNAPPOINTREFACTIONPARAM
  ASSOCPERSSUBENTMANAGER ASSOC2DCONSTRAINTGROUP EVALUATION_GRAPH
  ASSOCOSNAPPOINTREFACTIONPARAM ACSH_BOX_CLASS ACSH_EXTRUSION_CLASS
  ACSH_SWEEP_CLASS NAVISWORKSMODELDEF

@item Unhandled (i.e. passed through, no DXF and fields):

  ACSH_HISTORY_CLASS ACSH_REVOLVE_CLASS ACSH_SPHERE_CLASS
  ARCALIGNEDTEXT ARC_DIMENSION
  ASSOCGEOMDEPENDENCY
  ASSOCVERTEXACTIONPARAM DATATABLE
  DETAILVIEWSTYLE DOCUMENTOPTIONS GEODATA
  LAYOUTPRINTCONFIG LEADEROBJECTCONTEXTDATA LIGHTLIST NPOCOLLECTION
  POINTCLOUD RTEXT SECTIONVIEWSTYLE TABLESTYLE XREFPANELOBJECT

@item no test coverage for entities:

I.e. we need an extended @file{example_2018.dwg} with all types,
for the following missing entities:

  ARCALIGNEDTEXT BODY CAMERA DIMENSION_ANG3PT DIMENSION_DIAMETER
  DIMENSION_RADIUS DGNUNDERLAY DWFUNDERLAY
  GEOPOSITIONMARKER IMAGE LEADER LONG_TRANSACTION MINSERT
  OLE2FRAME OLEFRAME POLYLINE_2D POLYLINE_MESH
  PROXY_ENTITY PROXY_LWPOLYLINE SHAPE
  TOLERANCE VERTEX_2D VERTEX_MESH

and objects:

  DOCUMENTOPTIONS  DETAILVIEWSTYLE
  XREFPANELOBJECT GEODATA IDBUFFER IMAGEDEF
  IMAGEDEF_REACTOR LAYER_INDEX LIGHTLIST
  NPOCOLLECTION OBJECT_PTR PLOTSETTINGS PROXY_OBJECT
  RASTERVARIABLES SPATIAL_INDEX UCS VBA_PROJECT VIEW VPORT_ENTITY_CONTROL
  VPORT_ENTITY_HEADER

@end table

@section Related projects

@cindex projects, related

Some projects that use DWG (and specifically LibreDWG) are:

@table @asis
@item FreeCAD
@url{https://freecadweb.org/}
@item GRASS GIS
@url{http://grass.osgeo.org/}
@end table

Plans are to add support for SolveSpace, OpenSCAD and PythonCAD.

Related libraries:

@table @asis
@item libdwg
The old version (documented in Esperanto) which was forked to LibreDWG in 2009.
But in the meantime it got a DXF reader.
@item libdxfrw
Read the DWG format for all versions r13+ but with much less elements, only those needed for DXF.
Written in C++, under the GPLv2 license.
@item libopencad
Read the R2000 DWG format.
Written in C++, under the GPLv2 license.
@item OpenDWG
The OpenDWG's license does not allow the usage in free software projects.
@end table

Compared to libdwg, libdxfrw and libopencad, LibreDWG can read and
write much more details. Which is especially important for attached links
and data from third party applications: BIM, MAP, GIS, AEC, MECH, ...
and for 3D solids and dynamic parametric constraints.

@node Usage
@chapter Usage

@cindex header
@cindex compilation
@cindex linking

This chapter describes how to compile and link a program against
LibreDWG.  To access LibreDWG interface elements (@pxref{Types},
@pxref{Functions}), include its header file in the C code.

@example
#include <dwg.h>
@end example

Optionally you can also use the 
@example
#include <dwg_api.h>
@end example
API.

@noindent
Make sure you specify @samp{-lredwg} when linking,
such as in this @file{Makefile.am} fragment:

@example
AM_LDFLAGS += -lredwg
@end example

@noindent
Note that the shared object library is named @file{libredwg} (with some
system-specific extension, e.g., @file{.so}), so you do @strong{not}
want to specify @code{-llibredwg}, as that would (try to) link against
@file{liblibredwg} and fail.


@node Types
@chapter Types

@cindex data types
@cindex enums
@cindex structs

LibreDWG types map closely to the type system of the DWG file format.
This chapter describes the enums and structs used to define the single
DWG structure, which is passed around the functions x(@pxref{Functions}).

@deftypevr {define} BITCODE_RC char
1 raw unsigned char, uint8_t
@end deftypevr
@deftypevr {define} BITCODE_RS short
1 raw unsigned short int, uint16_t
@end deftypevr
@deftypevr {define} BITCODE_RL long
1 raw unsigned long int, uint32_t
@end deftypevr
@deftypevr {define} BITCODE_RD double
1 raw IEEE-754 double
@end deftypevr
@deftypevr {define} BITCODE_B byte
1 bit
@end deftypevr
@deftypevr {define} BITCODE_BB byte
2 bits
@end deftypevr
@deftypevr {define} BITCODE_3B byte
1-3 bits
@end deftypevr
@deftypevr {define} BITCODE_4BITS byte
4 bits (for VIEW view_mode)
@end deftypevr
@deftypevr {define} BITCODE_BS short
1 bit-encoded unsigned short
@end deftypevr
@deftypevr {define} BITCODE_BL long
1 bit-encoded unsigned long (max 32bit)
@end deftypevr
@deftypevr {define} BITCODE_BLL uint64_t
1 bit-encoded unsigned 64bit long
@end deftypevr
@deftypevr {define} BITCODE_BD double
1 bit-encoded double
@end deftypevr
@deftypevr {define} BITCODE_DD double
1 bit-encoded double with default
@end deftypevr
@deftypevr {define} BITCODE_MC long int
1-4 modular chars
@end deftypevr
@deftypevr {define} BITCODE_UMC long unsigned int
1-4 unsigned modular chars
@end deftypevr
@deftypevr {define} BITCODE_MS long unsigned int
1 modular short, max 2 words
@end deftypevr
@deftypevr {define} BITCODE_BE double[3]
1 bitencoded extrusion vector.

Note that this specifies an OCS (Object Coordinate System) for each
entity, with the default (0, 0, 1).  An extrusion of (0, 0, -1) is
typically caused by exploding a block inserted with a negative x
scale, i.e. the sign of each X point needs to be flipped.  For more
see the vendor DXF documentation on OCS and @file{programs/geom.c}.

@cindex OCS
@end deftypevr
@deftypevr {define} BITCODE_BT double
1 bitencoded thickness value
@end deftypevr
@deftypevr {define} BITCODE_TV char*
length + ASCIIZ string
The default text type until r2004.
@end deftypevr
@deftypevr {define} BITCODE_TU wchar*
length + windows 2-byte wchar string (UCS-2).
The default text type since r2007.
@end deftypevr
@deftypevr {define} BITCODE_TF char*
Fixed length buffer, which can include NUL characters.
@end deftypevr
@deftypevr {define} BITCODE_TFF char*
Embedded fixed length string, which can include NUL characters.
@end deftypevr
@deftypevr {define} BITCODE_H void*
handle-references
@end deftypevr
@deftypevr {define} BITCODE_CMC struct Dwg_Color
Dwg_Color struct with index or rgb, alpha and optional DBCOLOR handle, name, book_name.
@end deftypevr
[and some more]

@cindex return code
@cindex code, return
@cindex error code
@cindex code, error

Two types that do not derive from the type system of the DWG file format
are the enums for return codes and error codes.

On non-C99 systems ensure that stdint.h and inttypes.h are available
to use the proper C99 @code{int32_t},... types, and not just the
native fallback types int/long, which are different across platforms.

@node Objects
@chapter Objects

@c TODO CLASSES, TABLES? Or maybe add a ``is a table'' note to the object.
@menu
* HEADER::            All Header variables
* ENTITIES::          All Entities and its special and common fields
* OBJECTS::           All Objects and its special and common fields
* SummaryInfo::       All SummaryInfo fields
@end menu

@include dynapi.texi

@node Structures
@chapter Structures

@cindex structures

@menu
* EED::            eed[] array
* XDATA::          xdata list for XRECORD
@end menu

@node EED
@section EED

@cindex EED

``Extended Entity Data'' (EED) may be optionally attached to each object.
They consist of a handle to the registered APPID, and a list of
typed data. Each block is preceded with a size, the processing stops with
size 0.

Internally libredwg stores each eed line as an array of num_eed structs.
If the size > 0, then new block starts with a handle, an optional raw string
(when reading from a DWG), and a number of typed data entries. Only the first
eed struct of each block has a size, all subsequent eed structs have size 0.

Example:
@example
  EED[0] size: 109 [BS]
  EED[0] handle: 5.2.762
  EED[0] code: 70 [RC] short: 2 [RS]
  EED[1] code: 70 [RC] short: 0 [RS]
  EED[2] code: 70 [RC] short: 0 [RS]
  EED[3] code: 11 [RC] 3dpoint: (0.000000, 0.000000, 0.000000) [3RD]
  EED[4] code: 11 [RC] 3dpoint: (1.000000, 0.000000, 0.000000) [3RD]
  EED[5] code: 11 [RC] 3dpoint: (0.000000, 1.000000, 0.000000) [3RD]
  EED[6] code: 11 [RC] 3dpoint: (0.000000, 0.000000, 1.000000) [3RD]
  EED[7] size: 6 [BS]
  EED[7] handle: 5.2.763
  EED[7] code: 70 [RC] short: 0 [RS]
  EED[8] code: 70 [RC] short: 0 [RS]
  EED[9] size: 23 [BS]
  EED[9] handle: 5.1.12
  EED[9] code: 0 [RC] string: "RTMaterial" len=10 cp=30
  EED[10] code: 5 [RC] entity: 0x6507000000000000 [RLL]
  - size: 0 [BS]
@end example

These 10 num_eed structs consist of 3 blocks with 3 size and handle entries.
EED[0] starts with size 109, the handle pointing to object 762, 3 shorts
and 4 points. The next block at EED[7] has size 6, the handle pointing to object 763
and 2 shorts. The last block at EED[9] has size 9, the handle pointing to object 12
(the APPID.ACAD application) and a string and an entity reference.
The size is calculated by the needed room for all data code + values, without the handle.
E.g. EED[7] size: 6 is 1 + 2 for EED[7] RC + RS, and 1 + 2 for EED[8] RC + RS.

Each data block consists of a RC code, and a variable value.
A string may be a an old pre-r2007 ASCII string with a RC length (max 255
chars), a codepage and the string. Or a r2007+ wide string with a RS
length (max 32767 chars), a codepage, and a UCS-2 wide string.

decode stores both, the raw data, and the structured data.
in_dxf just the data.
encode prefers raw over the data.

@node XDATA
@section XDATA

@cindex XDATA

XRECORD XDATA are very similar to the EED array, but internally it is
a single linked-list, consisting of something like the EED data code
+ value pairs. There's only one size, xdata_size, and only one handle
to the APPID, which handles this XRECORD XDATA.

@node Functions
@chapter Functions

@cindex functions

You can use LibreDWG immediately upon loading, without any particular
initialization. Only when using some @b{dwg_api} functions you might need to
initialize the version via @code{dwg_api_init_version(&dwg)}, when you
need other formats than r2000 and you call an API function which does
not store the version internally. Most do. This limitation will soon be fixed.

You usually use one set of functions - either decoding or encoding -
at a time.  All functions use the common data types (@pxref{Types}).
All functions return an error code, and the high-level functions for
multiple objects add the error bitmask, which is sorted by severity.
When the error exceeds DWG_ERR_CRITICAL, processing is stopped.

@menu
* Decoding::                    Functions on the DWG read path.
* Encoding::                    Functions on the DWG write path.
* Other Formats::		Functions on the DWG to read or write other formats.
@end menu


@node Decoding
@section Decoding

@cindex functions, decoding
@cindex functions, read path

The highest level function for decoding a file is @strong{@code{dwg_read_file}}.

@deftypefn {Function} int dwg_read_file (char *@var{filename}, Dwg_Data *@var{dwg})
Open @var{filename} and decode it, saving information into @var{dwg}.
Return 0 if successful.
@end deftypefn

You can then iterate over the entities in model space or paper space
via two ways:

1. by using the @file{dwg.h} data structures. Via @code{dwg->object[0]}, which is of
   type @code{Dwg_Object_BLOCK_CONTROL},
   and a custom @code{void process_BLOCK_HEADER(Dwg_Object_Ref* ref)}:

@verbatim
  Dwg_Object_BLOCK_CONTROL* block_control = dwg->block_control;
  // first all entities in the model space
  process_BLOCK_HEADER(dwg->header_vars.BLOCK_RECORD_MSPACE);
  // then all entities in the blocks
  for (i=0; i < block_control->num_entries; i++)
    {
      process_BLOCK_HEADER(block_control->block_headers[i]);
    }
  // and last all entities in the paper space
  process_BLOCK_HEADER(dwg->header_vars.BLOCK_RECORD_PSPACE);
@end verbatim

or 2. by using the API functions from @file{dwg_api.h}:

@verbatim
  Dwg_Object_BLOCK_CONTROL* block_control = dwg_block_control(dwg);
  process_BLOCK_HEADER(dwg_model_space_ref(dwg));
  for (i=0; i < block_control->num_entries; i++)
    {
      process_BLOCK_HEADER(block_control->block_headers[i]);
    }
  process_BLOCK_HEADER(dwg_paper_space_ref(dwg));
@end verbatim

and inside the @code{process_BLOCK_HEADER} function, you iterate over the entities
from the block_header via:

@verbatim
  Dwg_Object* obj = get_first_owned_entity(ref->obj);
  while (obj)
    {
      process_object(obj);
      obj = get_next_owned_entity(ref->obj, obj);
    }
@end verbatim

where @code{process_object} checks the type of each entity under the
@var{Dwg_Object* obj}.

For each entity or object type (i.e. a non-graphical dwg object, also tables)
there also exist the simple and expensive @code{dwg_getall_ENTITY} and @code{dwg_getall_OBJECT}
functions:

@deftypefn {Function} int dwg_getall_ENTITY (Dwg_Object_Ref *@var{block_header_ref})
Return a malloc'ed NULL-terminated array of all such entities for Model Space,
Paper Space or an individual block.
@end deftypefn

@deftypefn {Function} int dwg_getall_OBJECT (Dwg_Data *@var{dwg})
Return a malloc'ed NULL-terminated array of all such DWG objects.
@end deftypefn

The decoder is driven by the fields definition in the @file{src/dwg.spec}, which adds each
field to the object. This is done in the @file{src/decode.c} or @file{src/decode_r2007.c}.
@deftypefn {Function} int dwg_decode_OBJECT (Bit_Chain *@var{dat}, Dwg_Object *@var{obj})
Sets the fields for the object from the DWG bitstream.
@end deftypefn

@node Encoding
@section Encoding

@cindex functions, encoding
@cindex functions, write path

Encoding DWG files, i.e. DWG write support, can be disabled via
@code{./configure --disable-write}. The default format and only useful
one is currently r13-r2000. See @file{src/in_dxf.c} for a high-level usage example.

The highest level function for encoding a bitstream to a file is @code{dwg_write_file}.

@deftypefn {Function} int dwg_write_file (char *@var{filename}, Dwg_Data *@var{dwg})
Open @var{filename} and write the @var{dwg} to it.
Return 0 if successful.
@end deftypefn

@deftypefn {Function} int dwg_add_object (Dwg_Data *@var{dwg})
Adds a new uninitialized object to the @var{dwg->object}[] array.
Return 0 or -1 if successful, otherwise DWG_ERR_OUTOFMEM. -1 is the array was re-allocated.
@end deftypefn

Then for each object or entity type there is a
@deftypefn {Function} int dwg_add_OBJECT (Dwg_Object *@var{obj})
Initializes an object for the given OBJECT or ENTITY type, with all fields being zero'ed.
This does not initialize the @var{obj} size, type, address, handlestream_size, bitsize fields.
@end deftypefn

The encoder is driven by the fields definition in the @file{src/dwg.spec} and
the generated @file{src/dynapi.c}, which adds each field to the object.
This is done by @file{src/encode.c} or any @file{src/in_*.c} import module.
@deftypefn {Function} int dwg_encode_OBJECT (Bit_Chain *@var{dat}, Dwg_Object *@var{obj})
Encodes the DWG bitstream from the fields of the object.
@end deftypefn

The iterator is similar to above, but you want to encode all data
structures, not just the entities. But note that you need many helper
functions, such as the dynapi, to create all needed sections to store
a DWG if you didn't read a DWG into the right a @var{Dwg_Data* dwg}
struct already. This is especially important when importing from DXF
or from an earlier or later DWG version.

@node Other Formats
@section Other Formats

@cindex functions, other formats

@menu
* DXF::                    Write and read ASCII DXF
* DXFB::                   Write (and soon read) Binary DXF.
* JSON::		   Write and read our own JSON serialization of the DWG
* GeoJSON::		   See the GeoJSON spec
@end menu

@node DXF
@subsection DXF

@cindex DXF, ASCII DXF

We can write ASCII DXF files in various versions, with much more data
than other free DWG libraries, but not as stable as the unfree Teigha
library yet.  AutoCAD fails to import some of our files still (~20%
failure rate).

Options: @code{--minimal} (see @code{dwg2dxf} or @code{dwgread}) creates
only a short header with a ACADVER and HANDSEED element, and the
entities, without any subclass markers, reactors or handles.

Reading DXF is under construction and works for most entities.

@node DXFB
@subsection DXFB

@cindex DXFB, Binary DXF

We can almost write Binary DXF files in various versions.

Reading DXFB is under construction and un-tested.

@node JSON
@subsection JSON

@cindex JSON

We write to and read back from our own JSON format, which is a
readable 1:1 mapping of the DWG structures, and carries much more
information than the DXF format. The idea is to dump a DWG to JSON and
filter/query or postprocess it with more powerful JSON query tools
such as @b{jq} (@url{https://stedolan.github.io/jq/}), and optionally
import it back in. JSON is much better structured than DXF.

Writing a JSON to stdout via a pipe is not yet recommended, as then
ending commas are still there, which is strictly not valid JSON.

The current first level objects are all the section names, like
``HEADER'', ``CLASSES'', ``OBJECTS''. For more see the specs.

@node GeoJSON
@subsection GeoJSON

@cindex GeoJSON

Work is ongoing to write to the GeoJSON format as specified at
@uref{http://geojson.org/geojson-spec.html}.  See @code{dwgread} with
the @code{--fmt GeoJSON} option.

This is about 70% finished. User-feedback needed.

Covered entity types are so far:
INSERT, POLYLINE_2D, POLYLINE_3D, LINE, POINT,
LWPOLYLINE, GEOPOSITIONMARKER

@node Errors
@chapter Errors

@cindex error

LibreDWG is mostly a library, and as such collects error codes from
the highest level function down to the lowest level functions.
The error codes are sorted by severity, and only if the error exceeds
@var{DWG_ERR_CRITICAL}, i.e. @code{DWG_ERR_CLASSESNOTFOUND}, processing is stopped.

All error bitmasks are collected during read or write and returned at the end.

@vtable @code
@item DWG_ERR_WRONGCRC
1
@item DWG_ERR_NOTYETSUPPORTED
2
@item DWG_ERR_UNHANDLEDCLASS
4
@item DWG_ERR_INVALIDTYPE
8
@item DWG_ERR_INVALIDHANDLE
16
@item DWG_ERR_INVALIDEED
32
@item DWG_ERR_VALUEOUTOFBOUNDS
64
@item DWG_ERR_CLASSESNOTFOUND
128 = @code{DWG_ERR_CRITICAL}
@item DWG_ERR_SECTIONNOTFOUND
256
@item DWG_ERR_PAGENOTFOUND
512
@item DWG_ERR_INTERNALERROR
1024
@item DWG_ERR_INVALIDDWG
2048
@item DWG_ERR_IOERROR
4096
@item DWG_ERR_OUTOFMEM
8192
@end vtable

Additionally, verbose warning and error messages are printed to stderr.

Unhandled class and Invalid type errors of objects are not severe. A
DWG format can store a serialization of many third party classes and
objects, and thus we will never be able read all possible types.
Unknown types are just stored as binary blob without any DXF codes.

@node Programs
@chapter Programs

@cindex programs

LibreDWG installs some binary programs to read or write DWG files.

@table @asis

@item @file{dwgread}
@cindex dwgread

This reads a DWG file, and optionally converts its content to some
output formats: JSON, GeoJSON, DXF, DXFB (i.e. Binary DXF).

@code{dwgread [OPTION]... DWGFILE}

Options:

       -v[0-9], --verbose [0-9]
              verbosity

       -O fmt,  --format fmt
              fmt: JSON, DXF, DXFB, GeoJSON

              More planned formats: YAML, XML/OGR, GPX, SVG, PS

       -o outfile
              also defines the output fmt. Default: stdout

       --help display this help and exit

       --version
              output version information and exit

Currently the options need to be specified in this exact same order.

@item @file{dwgwrite}
@cindex dwgwrite

Create a DWG from a given input file (@pxref{DXF}, @pxref{DXFB, Binary DXF}, @pxref{JSON}),
optionally via @code{--as-rNNNN} as another version. Experimental.
For now can only create r13-r2000 DWG files.

@item @file{dwg2dxf}
@cindex dwg2dxf
Converts DWG files to DXF, optionally via @code{--as-rNNNN} as another
version, an earlier or later version, or via @code{-m} or
@code{--minimal} as a minimal DXF version, skipping most headers vars,
classes, tables and objects.

@code{--binary} as a binary DXF file, with full precision, under construction.

The DXF files are created in the current directory and not overwritten, unless
the option @code{--overwrite} or @code{-y} is given.

@item @file{dxf2dwg}
@cindex dxf2dwg
Converts DXF (or Binary DXF) files to DWG, optionally via @code{--as-rVER} as another
version, an earlier or later version.

The DWG files are created in the current directory and not overwritten, unless
the option @code{--overwrite} or @code{-y} is given.

This program is experimental and AutoCAD may fail to import
it. Only r13-r2000 DWG's can be written yet, currently the default is
writing as r2000.

@item @file{dwgrewrite}
@cindex dwgrewrite

Read and write the DWG, optionally via @code{--as-rNNNN} as another
version, an earlier or later version. The default is writing as r2000.

@item @file{dwglayers}
@cindex dwglayers

Prints all layers in a DWG.
With @code{-x} or @code{--extnames} prints the extended displayed layer name with spaces,
not the internally stored old-style name with @code{_} instead.
Only relevant with old r13 and r14 DWGs, after that layers are always stored in the extended format.
With @code{-f} or @code{--flags} also the status of frown, on/off and locked.
With @code{--on} only the visible layers, which are on and not frozen.

You can get the same effect via this json filter:
@verbatim
  dwgread -O json -o out.json example.dwg && \
    cat out.json | jq '.OBJECTS[]' | \
    grep -A5 '"object": "LAYER"' | grep name
@end verbatim

@item @file{dwggrep}
@cindex dwggrep

Search regex pattern in all text values in a list of DWGs. dwggrep uses PCRE.

With @code{-i} searches case-insensitive.
With @code{-c} prints only the count of found texts.
With @code{-h} or @code{--no-filename} does not print the filename.
With @code{--type NAME} search only NAME entities or objects.
With @code{--dxf NUM} search only in DXF group NUM fields.
With @code{--text} searches only TEXT-like entities: TEXT, MTEXT, ATTRIB, ATTDEF.

@item @file{dwgfilter}
@cindex dwgfilter

Search and modify a single DWG file via @code{jq}, using the powerful
JQ query expression language on a temporary json file. See @code{man jq}.

With @code{-i} replaces the DWG in-place. This only makes sense with an JQ expression which changes values.

@item @file{dwg2SVG}
@cindex dwg2SVG
Convert a DWG to a limited SVG. All paperspace and modelspace enties of type:
TEXT, LINE, CIRCLE, ARC, POLYLINE_2D, LWPOLYLINE, INSERT.

Limitations: Many other graphical entities and properties are still missing.

@item @file{dwg2ps}
@cindex dwg2ps
Convert a DWG to a very limited Postscript file. All paperspace and modelspace enties of type LINE.

This requires installation of pslib @uref{http://pslib.sourceforge.net/doc/pslib.html}.

Note that the graphical representation for PS and SVG output is severely lacking, block references (insert entities) are not yet exploded, UCS and paper space transformations per entity are not yet done.

@end table

There are also some more examples in the source distribution:

@table @asis

@item @file{load_dwg}
@cindex load_dwg
loads a DWG and adds some entities.

@item @file{dwg2svg2}
@cindex dwg2svg2
converts a DWG to SVG similar to @file{dwg2SVG},
but via the @file{dwg_api.h} only. The graphical representation for PS and SVG output is severely lacking, block references (insert entities) are not yet exploded , UCS and paper space transformations per entity are not yet done.

@item @file{unknown}
@cindex unknown
lists the not yet reverse-engineered blobs from our example files, and
is the framework to guess the field layout for these.

@end table

@node Bindings
@chapter Bindings

@cindex python
@cindex perl

LibreDWG generates library bindings to python and perl5 via
swig. These can be quite huge, and it is recommended to use @file{ccache}.
You can easily add bindings to other swig-supported languages, like Go, C#,
ruby, php, D, lua, tcl, common lisp, ocaml, or others by yourself. Patches accepted.

@node Reference API
@chapter Reference API

@cindex Reference API

See the separate @uref{https://www.gnu.org/software/libredwg/refman/, refman} manual (in pdf or html format, the pdf has ~1800 pages) for a detailed API description, or see the relevant @file{dwg.h}, @file{dwg_api.h} or the @file{*.spec} files.

For reference you might also want to check the public AutoCAD DXF reference manuals,
and the ODA @file{OpenDesign_Specification_for_dwg_files.pdf}.

@comment It is unfortunately not possible to include the doxygen generated tex
@comment files into this texinfo format.

@node Reporting bugs
@chapter Reporting bugs

@cindex bug reporting
@cindex problems
@cindex reporting bugs

To report bugs or suggest enhancements for GNU LibreDWG, please
``submit a bug'' at
@uref{http://savannah.gnu.org/projects/libredwg, Savannah}
or send electronic mail to @email{libredwg@@gnu.org}.
(If you use the web interface, you don't need to also send email,
since that is done automatically.)
Pull requests at the github mirror at 
@uref{https://github.com/LibreDWG/libredwg, Github} are also accepted for now.

@cindex checklist for bug reports
For bug reports, please include enough information for the maintainers
to reproduce the problem.  Generally speaking, that means:

@itemize @bullet
@item The version numbers of LibreDWG and any other program(s) or manual(s) involved.
@item Hardware and operating system names and versions.
@item The contents of any input files necessary to reproduce the bug.
@item The expected behavior and/or output.
@item A description of the problem and samples of any erroneous output.
@item Options you gave to @command{configure} other than specifying
      installation directories.
@item Anything else that you think would be helpful. Usually that's the failing part
of the object processed with @file{dwgread -v5}, but only the failing part, not the whole output.
@end itemize

When in doubt whether something is needed or not, include it.  It's
better to include too much than to leave out something important.

@cindex patches, contributing
Patches are welcome; if possible, please make them with
@samp{git format-patch} and
include @file{ChangeLog} entries (@pxref{Change Log,,, emacs, The GNU
Emacs Manual}).  Please follow the existing GNU coding conventions.
See @file{CONTRIBUTING} in the source distribution.

@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl.texi
@include version.texi

@node Index
@chapter Index

@menu
* General Index::            Concepts, functions and types.
* Object and Field Index::   Objects, Entities and its fields.
@end menu

@node General Index
@section General Index

@printindex cp

@node Object and Field Index
@section Object and Field Index

@printindex vr

@bye

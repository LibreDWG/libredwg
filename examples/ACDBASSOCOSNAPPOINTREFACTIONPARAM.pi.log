ACDBASSOCOSNAPPOINTREFACTIONPARAM: 0x393 (146) test/test-data/example_2000.dxf:
10101010010000000110101000000001000000000000000000000000000000000000000000000000001111000010111111100000000011000000110010000000111001010001000000

[hdloff, strsize, commonsize, bitsize, hdlsize]=[116,0,60,17,0]
H330 8.0.0: 10000000 5 positions
BL90 0: 10 19 positions
BL90 0: 10 19 positions
BL90 0: 10 19 positions
BL90 1: 0100000001 2 positions
H360 3.2.394: 001100100000001110010100 fixed = [115,138]
BL90 0: 10 19 positions
BL90 0: 10 19 positions
H330 4.0.0: 01000000 5 positions
BL90 0: 10 19 positions
BL90 1: 0100000001 2 positions
BD40 -1.0: 000000000000000000000000000000000000000000000000001111000010111111 fixed = [33,98]

fixed = [[33,98],[115,138]]
sortd = [[9,18],[33,98],[115,138]]

Definite result: 100/146	example_2000.dxf
----------------
HOLE([1,8],10101010) len = 8
FIELD_BL ([], 90);	// 1 [9,18]
HOLE([19,32],10101000000001) len = 14
FIELD_BD ([], 40);	// -1.0 [33,98]
HOLE([99,114],1000000000110000) len = 16
FIELD_H (writedep, 360);	// 3.2.394 [115,138]
HOLE([139,146],01000000) len = 8
----------------
Todo: 28 + 100 = 128, Missing: 18
FIELD_H (ownerhandle, 330);	// 8.0.0 10000000 [[10,17],[23,30],[32,39],[99,106]]
FIELD_BL (status, 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)
FIELD_BL (flags, 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)
FIELD_BL (num_params, 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)
FIELD_H ([], 330);	// 4.0.0 01000000 [[9,16],[22,29],[31,38],[139,146]]
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)

Most probable result: (TODO)

ACDBASSOCOSNAPPOINTREFACTIONPARAM: 0x393 (145) test/test-data/example_2004.dxf:
1010101001000000011010100000000100000000000000000000000000000000000000000000000000111100001011111110000000001100100000001110010100010000001111111

[hdloff, strsize, commonsize, bitsize, hdlsize]=[116,0,61,17,0]
H330 8.0.0: 10000000 5 positions
BL90 0: 10 18 positions
BL90 0: 10 18 positions
BL90 0: 10 18 positions
BL90 1: 0100000001 2 positions
H360 3.2.394: 001100100000001110010100 fixed = [107,130]
BL90 0: 10 18 positions
BL90 0: 10 18 positions
H330 4.0.0: 01000000 5 positions
BL90 0: 10 18 positions
BL90 1: 0100000001 2 positions
BD40 -1.0: 000000000000000000000000000000000000000000000000001111000010111111 fixed = [33,98]

fixed = [[33,98],[107,130]]
sortd = [[9,18],[33,98],[107,130]]

Definite result: 100/145	example_2004.dxf
----------------
HOLE([1,8],10101010) len = 8
FIELD_BL ([], 90);	// 1 [9,18]
HOLE([19,32],10101000000001) len = 14
FIELD_BD ([], 40);	// -1.0 [33,98]
HOLE([99,106],10000000) len = 8
FIELD_H (writedep, 360);	// 3.2.394 [107,130]
HOLE([131,145],010000001111111) len = 15
----------------
Todo: 28 + 100 = 128, Missing: 17
FIELD_H (ownerhandle, 330);	// 8.0.0 10000000 [[10,17],[23,30],[32,39],[99,106]]
FIELD_BL (status, 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)
FIELD_BL (flags, 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)
FIELD_BL (num_params, 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)
FIELD_H ([], 330);	// 4.0.0 01000000 [[9,16],[22,29],[31,38],[131,138]]
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[7,8],[10,11],[19,20],[21,22],[23,24],[32,33],[99,100]]...)

Most probable result: (TODO)

ACDBASSOCOSNAPPOINTREFACTIONPARAM: 0x393 (161) test/test-data/example_2007.dxf:
10101001000000011010100000000100000000000000000000000000000000000000000000000000111100001011111110000000100000000011000000000110010000000111001010001000000111111

[hdloff, strsize, commonsize, bitsize, hdlsize]=[133,0,61,19,46]
H330 8.0.0: 10000000 7 positions
BL90 0: 10 19 positions
BL90 0: 10 19 positions
BL90 0: 10 19 positions
BL90 1: 0100000001 2 positions
H360 3.2.394: 001100100000001110010100 fixed = [124,147]
BL90 0: 10 19 positions
BL90 0: 10 19 positions
H330 4.0.0: 01000000 6 positions
BL90 0: 10 19 positions
BL90 1: 0100000001 2 positions
BD40 -1.0: 000000000000000000000000000000000000000000000000001111000010111111 fixed = [31,96]

fixed = [[31,96],[124,147]]
sortd = [[7,16],[31,96],[124,147]]

Definite result: 100/161	example_2007.dxf
----------------
HOLE([1,6],101010) len = 6
FIELD_BL ([], 90);	// 1 [7,16]
HOLE([17,30],10101000000001) len = 14
FIELD_BD ([], 40);	// -1.0 [31,96]
HOLE([97,123],100000001000000000110000000) len = 27
FIELD_H (writedep, 360);	// 3.2.394 [124,147]
HOLE([148,161],01000000111111) len = 14
----------------
Todo: 28 + 100 = 128, Missing: 33
FIELD_H (ownerhandle, 330);	// 8.0.0 10000000 [[8,15],[21,28],[30,37],[97,104],[105,112],[116,123]]
FIELD_BL (status, 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)
FIELD_BL (flags, 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)
FIELD_BL (num_params, 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)
FIELD_H ([], 330);	// 4.0.0 01000000 [[7,14],[20,27],[29,36],[104,111],[148,155]]
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)

Most probable result: (TODO)

ACDBASSOCOSNAPPOINTREFACTIONPARAM: 0x393 (161) test/test-data/example_2010.dxf:
10101001000000011010100000000100000000000000000000000000000000000000000000000000111100001011111110000000100000000011000000000110010000000111001010001000000111111

[hdloff, strsize, commonsize, bitsize, hdlsize]=[125,2,29,15,46]
H330 8.0.0: 10000000 7 positions
BL90 0: 10 19 positions
BL90 0: 10 19 positions
BL90 0: 10 19 positions
BL90 1: 0100000001 2 positions
H360 3.2.394: 001100100000001110010100 fixed = [124,147]
BL90 0: 10 19 positions
BL90 0: 10 19 positions
H330 4.0.0: 01000000 6 positions
BL90 0: 10 19 positions
BL90 1: 0100000001 2 positions
BD40 -1.0: 000000000000000000000000000000000000000000000000001111000010111111 fixed = [31,96]

fixed = [[31,96],[124,147]]
sortd = [[7,16],[31,96],[124,147]]

Definite result: 100/161	example_2010.dxf
----------------
HOLE([1,6],101010) len = 6
FIELD_BL ([], 90);	// 1 [7,16]
HOLE([17,30],10101000000001) len = 14
FIELD_BD ([], 40);	// -1.0 [31,96]
HOLE([97,123],100000001000000000110000000) len = 27
FIELD_H (writedep, 360);	// 3.2.394 [124,147]
HOLE([148,161],01000000111111) len = 14
----------------
Todo: 28 + 100 = 128, Missing: 33
FIELD_H (ownerhandle, 330);	// 8.0.0 10000000 [[8,15],[21,28],[30,37],[97,104],[105,112],[116,123]]
FIELD_BL (status, 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)
FIELD_BL (flags, 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)
FIELD_BL (num_params, 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)
FIELD_H ([], 330);	// 4.0.0 01000000 [[7,14],[20,27],[29,36],[104,111],[148,155]]
FIELD_BL ([], 90);	// 0 10 [[1,2],[3,4],[5,6],[8,9],[17,18],[19,20],[21,22],[30,31],[97,98],[105,106]]...)

Most probable result: (TODO)

ACDBASSOCOSNAPPOINTREFACTIONPARAM: 0x393 (176) test/test-data/example_2013.dxf:
01000000011010100100000001101010000000010000000000000000000000000000000000000000000000000011110000101111111000000010000000001110000010000001000110010000000111001010001000000111

[hdloff, strsize, commonsize, bitsize, hdlsize]=[135,2,30,16,51]
H330 c.1.2: 1100000100000010 fixed = [126,141]
BL90 1: 0100000001 3 positions
BL90 0: 10 22 positions
BL90 0: 10 22 positions
BL90 0: 10 22 positions
BL90 1: 0100000001 3 positions
H360 3.2.394: 001100100000001110010100 fixed = [142,165]
BL90 0: 10 22 positions
BL90 0: 10 22 positions
H330 4.0.0: 01000000 8 positions
BL90 0: 10 22 positions
BL90 1: 0100000001 3 positions
BD40 -1.0: 000000000000000000000000000000000000000000000000001111000010111111 fixed = [41,106]

fixed = [[41,106],[126,141],[142,165]]
sortd = [[41,106],[126,141],[142,165]]

Definite result: 106/176	example_2013.dxf
----------------
HOLE([1,40],0100000001101010010000000110101000000001) len = 40
FIELD_BD ([], 40);	// -1.0 [41,106]
HOLE([107,125],1000000010000000001) len = 19
FIELD_H (ownerhandle, 330);	// c.1.2 [126,141]
FIELD_H (writedep, 360);	// 3.2.394 [142,165]
HOLE([166,176],01000000111) len = 11
----------------
Todo: 50 + 106 = 156, Missing: 20
FIELD_BL (status, 90);	// 1 0100000001 [[1,10],[17,26]]
FIELD_BL (flags, 90);	// 0 10 [[2,3],[11,12],[13,14],[15,16],[18,19],[27,28],[29,30],[31,32],[40,41],[107,108]]...)
FIELD_BL (num_params, 90);	// 0 10 [[2,3],[11,12],[13,14],[15,16],[18,19],[27,28],[29,30],[31,32],[40,41],[107,108]]...)
FIELD_BL ([], 90);	// 0 10 [[2,3],[11,12],[13,14],[15,16],[18,19],[27,28],[29,30],[31,32],[40,41],[107,108]]...)
FIELD_BL ([], 90);	// 1 0100000001 [[1,10],[17,26]]
FIELD_BL ([], 90);	// 0 10 [[2,3],[11,12],[13,14],[15,16],[18,19],[27,28],[29,30],[31,32],[40,41],[107,108]]...)
FIELD_BL ([], 90);	// 0 10 [[2,3],[11,12],[13,14],[15,16],[18,19],[27,28],[29,30],[31,32],[40,41],[107,108]]...)
FIELD_H ([], 330);	// 4.0.0 01000000 [[1,8],[17,24],[30,37],[39,46],[114,121],[166,173]]
FIELD_BL ([], 90);	// 0 10 [[2,3],[11,12],[13,14],[15,16],[18,19],[27,28],[29,30],[31,32],[40,41],[107,108]]...)
FIELD_BL ([], 90);	// 1 0100000001 [[1,10],[17,26]]

Most probable result: (TODO)


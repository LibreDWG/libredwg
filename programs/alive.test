#!/bin/sh
# alive.test
#
# Copyright (C) 2010 Thien-Thi Nguyen
# Copyright (C) 2018 Free Software Foundation, Inc.
#
# This program is free software, licensed under the terms of the GNU
# General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Author: Thien-Thi Nguyen
# Modified: Reini Urban

# Commentary:

# This is a provisional test until something better comes along.
# It checks "aliveness" and the program returning success, and not
# correctness or performance.
#
# It relies on the TESTS_ENVIRONMENT Makefile.am variable to set
# `PROGS'.  Each prog in PROGS is run against a set of example DWGs,
# and if *not* successful the verbose output from -v4 is saved in a
# file whose name is DWG-PROG.log.
#
# If there are no problems, exit successfully.  Otherwise display
# the count of problem runs, the list of *.log files and finally
# exit failurefully.
# datadir must be set to support testing from a seperate build dir.

# Code:

test "$PROGS" || { echo ERROR: Env var PROGS not set ; exit 1 ; }
test "$datadir" || { echo ERROR: Env var datadir not set ; exit 1 ; }

problems=0
rm -f dwg*.log

#just check that it does not crash
run ()
{
    prog=$1
    dwg=$2

    bprog=`basename $prog .exe`
    bdwg=`basename $dwg .dwg`
    log=$bdwg-$bprog.log
    arg="${datadir}/$dwg.dwg"
    if test $bprog != dwglayers
    then
        if test $bprog = dwgrewrite
        then
            arg="-v2 $arg"
        else
            arg="-v4 $arg"
        fi
    fi
    echo $TESTPROG ./$prog $arg
    # writers can hang
    if test $bprog = dwgrewrite -o $bprog = dwgwrite -o $bprog = dxf2dwg
    then
        if test x$MINGW != x; then
            OLDTESTPROG=$TESTPROG
            TESTPROG=echo
        else
            (sleep 5s; killall $bprog 2>/dev/null) &
        fi
    fi
    if $TESTPROG ./$prog $arg > $log 2>&1
    then
        rm $log
    else
        if test $bprog = dwgrewrite -o $bprog = dwgwrite -o $bprog = dxf2dwg
        then
            tmpnum=$(expr 1 + $problems)
            echo $(basename $0): TODO $prog $tmpnum failures
            ls -l $log
        else
            problems=$(expr 1 + $problems)
        fi
    fi
    if test x$MINGW != x -a x$OLDTESTPROG != x; then
        TESTPROG=$OLDTESTPROG
    fi
}

DATA="sample_2000 example_2000 r14/Leader_r14 2000/Leader_2000 2004/Leader_2004"
DATA="$DATA 2007/Leader_2007 2010/Arc 2013/Arc 2018/Arc"
TODO="r11/ACEL10 2010/Leader_2010 2013/Leader_2013 2018/Leader_2018"

for d in $DATA; do
    b=$(basename $d)
    rm $b.dxf 2>/dev/null
    rm $b.svg 2>/dev/null
    rm $b.ps 2>/dev/null
    rm $b.bmp 2>/dev/null
    rm $b-rewrite.dwg 2>/dev/null
done

for prog in $PROGS ; do
    for dwg in $DATA; do
        run $prog $dwg
    done
done
#run dwgread r11/ACEL10

# TODO: check generated DXF's against original DXF's
# skip the run part if dwg2dxf is part of bin_PROGRAMS (i.e. being installed)
# only in programs, not examples:
if test -f cmp_dxf.pl ; then
    for dwg in $DATA; do
        base=$(basename $dwg .dwg)
        run dwg2dxf $dwg
        #if [ -f ${datadir}/$dwg.dxf ]; then
        #    perl filt_dxf.pl ${datadir}/$dwg.dxf > $base.dxf.orig
        #    perl filt_dxf.pl $base.dxf > $base.dxf.new
        #    diff -bu  $base.dxf.orig $base.dxf.new | perl cmp_dxf.pl
        #    rm $base.dxf.orig $base.dxf.new 2>/dev/null
        #fi
    done
fi

if test x0 = x$problems ; then
    exit 0
else
    echo `basename $0`: $problems failures
    ls -l *.log
    exit 1
fi

# alive.test ends here

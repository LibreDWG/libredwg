name: Multi-Platform CI
on:
  push:
    branches:
      - master
      - smoke/*
      - gh/*
    tags:
      - '0.*.*'
      - '0.*'
      - 'nightly-*'
  pull_request:
    branches:
      - '*'
  workflow_dispatch:
    inputs:
      build_artifacts:
        description: 'Build and upload artifacts'
        required: false
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

#strategy:
#  matrix:
#    os: [ubuntu-14.04, ubuntu-18.04, ubuntu-20.04, ubuntu-latest]

jobs:
  # Ubuntu builds for multiple versions
  ubuntu:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 50
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-latest]
        CONFIGURE_ARGS:
          - CFLAGS="-O1 -fno-omit-frame-pointer -fsanitize=address -fno-var-tracking" --disable-bindings --disable-docs
          - CC="clang"
          - --enable-release
          - --enable-gcov --disable-bindings --disable-docs CFLAGS="-O0 -g"
          - --disable-write --disable-docs
          - CFLAGS="-O2 -m32" --disable-bindings --disable-docs
          - CFLAGS="-O2 -fno-omit-frame-pointer -fsanitize=undefined -fno-var-tracking" --disable-bindings --disable-docs --enable-check-less
          - --enable-debug
    steps:
    - if: ${{ startsWith(github.ref, 'refs/tags/') }}
      name: checkout for tag
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        submodules: recursive
    - if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      name: checkout for commit --depth 50
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-tags: true
        fetch-depth: 50
        submodules: recursive
    #- name: setup-python
    #  uses: actions/setup-python@v5
    #  with:
    #    python-version: '3.11'
    - if: contains(matrix.CONFIGURE_ARGS, '-m32')
      name: setup gcc-multilib
      run: |
        sudo apt-get -y update
        sudo apt-get -y install gcc-multilib
    #- name: setup-python-libxml2
    #  run: |
    #    python -m pip install --upgrade pip
    #    python -m pip install --upgrade libxml2-python3
    - if: contains(matrix.CONFIGURE_ARGS, '--enable-release')
      name: setup --enable-release
      run: |
        sudo apt-get -y update
        sudo apt-get -y install texlive help2man libconvert-binary-c-perl shellcheck \
          swig python3-dev python3-libxml2 libxml2-dev libpcre2-dev libpcre2-32-0 jq \
          pkg-config shellcheck parallel rpmlint shfmt doxygen jing valgrind cppcheck \
          gperf intltool latexml
        build-aux/install-libxslt
        build-aux/install-pslib
        build-aux/install-relaxng-svg11
        sudo npm i -g geojson-validation
    - uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        create-symlink: true
        key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.CONFIGURE_ARGS }}
    - run: sh autogen.sh
    - if: contains(matrix.CONFIGURE_ARGS, '-fsanitize=address')
      name: Fix kernel mmap rnd bits for -fsanitize=address
      run: |
        # echo "-fsanitize=address run-time broken in latest ubuntu image update from March 10, 2024"
        # https://github.com/actions/runner-images/issues/9491
        # Asan in llvm 14 provided in ubuntu 22.04 is incompatible with
        # high-entropy ASLR in much newer kernels that GitHub runners are
        # using leading to random crashes: https://reviews.llvm.org/D148280
        sudo sysctl vm.mmap_rnd_bits=28
    - run: ./configure ${{ matrix.CONFIGURE_ARGS }}
    - if: ${{ !contains(matrix.CONFIGURE_ARGS, '--enable-release') }}
      run: make -j
    - if: ${{ !contains(matrix.CONFIGURE_ARGS, '--enable-gcov') &&
              !contains(matrix.CONFIGURE_ARGS, '--enable-release') &&
              !contains(matrix.CONFIGURE_ARGS, '--enable-debug') &&
              startsWith(github.ref, 'refs/heads/') }}
      run: make -j check
    # Create Ubuntu artifacts for release config
    - if: contains(matrix.CONFIGURE_ARGS, '--enable-release') && matrix.os == 'ubuntu-latest'
      name: Create Linux artifact
      run: |
        make install DESTDIR=$PWD/install_dir
        tar czf libredwg-linux-x86_64.tar.gz -C install_dir .
    - if: contains(matrix.CONFIGURE_ARGS, '--enable-release') && matrix.os == 'ubuntu-latest'
      name: Upload Linux artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: libredwg-linux-x86_64
        path: libredwg-linux-x86_64.tar.gz
    #  run: |
    #    python -m pip install cpp-coveralls
    #    make gcov
    #    coveralls -e test -e bindings
    - if: contains(matrix.CONFIGURE_ARGS, '--enable-gcov')
      timeout-minutes: 65
      name: Run make codecov if --enable-gcov
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      run: make codecov
      continue-on-error: true
    - if: contains(matrix.CONFIGURE_ARGS, '--enable-release')
      name: Run make distcheck if --enable-release
      run: |
        make regen-dynapi
        make distcheck
    - if: contains(matrix.CONFIGURE_ARGS, '--enable-release') && startsWith(github.ref, 'refs/tags/')
      name: Prep-Release
      run: sha256sum libredwg-*.tar.* > dist.sha256
    - if: contains(matrix.CONFIGURE_ARGS, '--enable-release') && startsWith(github.ref, 'refs/tags/')
      name: Release
      continue-on-error: true
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      with:
        body_path: dist.sha256
        files: |
          dist.sha256
          libredwg-*.tar.*
  ppc64-big-endian:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - run: sudo apt-get -y update && sudo apt-get -y install gcc-powerpc64-linux-gnu libc6-ppc64-cross qemu-system-ppc binfmt-support qemu-user qemu-user-binfmt
    - uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        key: ${{ github.job }}
    - run: sh autogen.sh
    - run: CC="ccache powerpc64-linux-gnu-gcc" ./configure --host=powerpc64-linux-gnu --disable-bindings --disable-python
    - run: make -j
    - run: cd /lib64 && sudo ln -s /usr/powerpc64-linux-gnu/lib/ld64.so.1
    - run: make -j check-minimal
      continue-on-error: true
  mips32-big-endian:
    runs-on: ubuntu-latest
    timeout-minutes: 35
    steps:
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - run: sudo apt-get -y update && sudo apt-get -y install gcc-mips-linux-gnu gcc-multilib-mips-linux-gnu
    - uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        key: ${{ github.job }}
    - run: sh autogen.sh
    - run: CC="ccache mips-linux-gnu-gcc" CFLAGS=-Os ./configure --host=mips-linux-gnu --disable-bindings --disable-python
    - run: make -j
  linux-cmake:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    #strategy:
    #  fail-fast: true
    #  matrix:
    #    CMAKE_ARGS:
    #      - ""
    #      - "-DLIBREDWG_LIBONLY=On -DLIBREDWG_DISABLE_JSON=On"
    #      - "-DLIBREDWG_DISABLE_WRITE=On"
    steps:
    - name: setup-python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: 3.12
    - name: checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        create-symlink: true
        key: ${{ github.job }}
    - run: cmake -DLIBREDWG_LIBONLY=On -DCMAKE_C_COMPILER_LAUNCHER=ccache .
    - run: make -j
    - run: make -j test
    - if: failure()
      run: tar cfz cmake-failure.tgz Testing/Temporary/LastTest.log src/config.h
    - if: failure()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: cmake-failure.tgz
        path: cmake-failure.tgz
  # Fedora build using container
  fedora:
    runs-on: ubuntu-latest
    container: fedora:latest
    timeout-minutes: 30
    steps:
    - name: Install dependencies
      run: |
        dnf install -y git gcc gcc-c++ make autoconf automake libtool \
          texinfo libxml2-devel pcre2-devel python3-devel swig \
          redhat-rpm-config ccache which perl glibc-langpack-en
    - name: checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - name: Configure git safe directory
      run: git config --global --add safe.directory $GITHUB_WORKSPACE
    - uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        create-symlink: true
        key: ${{ github.job }}
    - run: sh autogen.sh
    - name: Configure with FORTIFY_SOURCE disabled
      run: CFLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0" ./configure --disable-werror
    - run: make -j
    - run: |
        # Run tests with more verbose output and continue on error
        make -j check VERBOSE=1 || {
          echo "Tests failed, checking test logs..."
          find . -name "*.log" -type f -exec echo "=== {} ===" \; -exec tail -20 {} \;
          exit 1
        }

  # Debian build using container
  debian:
    runs-on: ubuntu-latest
    container: debian:latest
    timeout-minutes: 30
    steps:
    - name: Install dependencies
      run: |
        apt-get update
        apt-get install -y git gcc g++ make autoconf automake libtool \
          texinfo libxml2-dev libpcre2-dev python3-dev swig ccache
    - name: checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - name: Configure git safe directory
      run: git config --global --add safe.directory $GITHUB_WORKSPACE
    - uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        create-symlink: true
        key: ${{ github.job }}
    - run: sh autogen.sh
    - run: ./configure --disable-werror
    - run: make -j
    - run: make -j check

  # CentOS/RHEL build using container
  centos:
    runs-on: ubuntu-latest
    container: rockylinux:9
    timeout-minutes: 30
    steps:
    - name: Install dependencies
      run: |
        dnf install -y epel-release
        dnf config-manager --set-enabled crb
        dnf install -y git gcc gcc-c++ make autoconf automake libtool \
          texinfo libxml2-devel pcre2-devel python3-devel \
          ccache which perl
    - name: checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - name: Configure git safe directory
      run: git config --global --add safe.directory $GITHUB_WORKSPACE
    - uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        create-symlink: true
        key: ${{ github.job }}
    - run: sh autogen.sh
    - run: ./configure --disable-werror
    - run: make -j
    - run: make -j check

  # Alpine Linux build (musl libc)
  alpine:
    runs-on: ubuntu-latest
    container: alpine:latest
    timeout-minutes: 30
    steps:
    - name: Install dependencies
      run: |
        apk add --no-cache git gcc g++ make autoconf automake libtool \
          texinfo libxml2-dev pcre2-dev python3-dev swig ccache bash perl
    - name: checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - name: Configure git safe directory
      run: git config --global --add safe.directory $GITHUB_WORKSPACE
    - uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        create-symlink: true
        key: ${{ github.job }}
    - run: sh autogen.sh
    - run: ./configure --disable-werror --disable-python
    - run: make -j
    - run: make -j check

  macOS:
    name: macOS
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-13, macos-latest]
        compiler: [gcc, clang]
    steps:
    - name: init
      run: brew install autoconf automake libtool texinfo
    - name: link texinfo
      run: brew link texinfo --force
    - name: setup-python
      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: 3.12
    - name: checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        create-symlink: true
        key: ${{ github.job }}-${{ matrix.os }}-${{ matrix.compiler }}
    - run: sh autogen.sh
    - run: CC="${{ matrix.compiler }}" ./configure --disable-bindings --disable-werror
    - run: PATH="/usr/local/opt/texinfo/bin:$PATH" make
    - run: PATH="/usr/local/opt/texinfo/bin:$PATH" make check
    #- run: make distcheck
    # Create macOS artifacts
    - if: matrix.compiler == 'clang' && matrix.os == 'macos-latest'
      name: Create macOS artifact
      run: |
        make install DESTDIR=$PWD/install_dir
        tar czf libredwg-macos-${{ matrix.os }}.tar.gz -C install_dir .
    - if: matrix.compiler == 'clang' && matrix.os == 'macos-latest'
      name: Upload macOS artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: libredwg-macos-${{ matrix.os }}
        path: libredwg-macos-${{ matrix.os }}.tar.gz
  mingw:
    name: mingw
    runs-on: windows-latest
    env:
      MSYS2_DIR: msys64
      MSYS2_ARCH: x86_64
      MSYSTEM: MINGW64
      ARCH: win64
      PLATFORM: x64
      #PATH: "C:\%MSYS2_DIR%\%MSYSTEM%\bin;C:\%MSYS2_DIR%\usr\bin;%PATH%"
    steps:
      # see https://github.com/msys2/setup-msys2
    - name: setup-msys2
      uses: msys2/setup-msys2@40677d36a502eb2cf0fb808cc9dec31bf6152638 # v2.28.0
      with:
        path-type: minimal
        update: true
        install: >-
          git
          base-devel
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-libtool
          mingw-w64-x86_64-libiconv
          mingw-w64-x86_64-libxml2
          mingw-w64-x86_64-swig
          mingw-w64-x86_64-python
          libtool
          autoconf-wrapper
          automake-wrapper
          texinfo
          gperf
          mingw-w64-x86_64-perl
          mingw-w64-x86_64-pcre2
    - run: reg add "HKLM\Software\Microsoft\Windows\Windows Error Reporting" /f /v DontShowUI /d 1
    - name: checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - shell: msys2 {0}
      run: sh ./autogen.sh
      continue-on-error: true
    - shell: msys2 {0}
      run: ./configure --disable-dependency-tracking --enable-check-less
    - shell: msys2 {0}
      run: make -j
    - if: failure()
      shell: msys2 {0}
      run: make -C src dwg_api.i; tar cfz mingw-failure.tgz src/dwg_api.i src/config.h
    - if: failure()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: mingw-failure.tgz
        path: mingw-failure.tgz
    - shell: msys2 {0}
      run: make -j check
    # Create Windows MinGW artifacts
    - if: success()
      shell: msys2 {0}
      name: Create Windows MinGW artifact
      run: |
        make install DESTDIR=$PWD/install_dir
        tar czf libredwg-win64-mingw.tar.gz -C install_dir .
    - if: success()
      name: Upload Windows MinGW artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: libredwg-win64-mingw
        path: libredwg-win64-mingw.tar.gz
  mingw-cmake:
    runs-on: windows-latest
    timeout-minutes: 20
    steps:
    - name: setup-msys2
      uses: msys2/setup-msys2@40677d36a502eb2cf0fb808cc9dec31bf6152638 # v2.28.0
      with:
        path-type: minimal
    - name: checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - uses: hendrikmuhs/ccache-action@63069e3931dedbf3b63792097479563182fe70d1 # v1.2.18
      with:
        key: ${{ github.job }}
    - run: cmake -G "MinGW Makefiles" -DDISABLE_WERROR=ON -DCMAKE_C_COMPILER_LAUNCHER=ccache .
    - run: mingw32-make -j VERBOSE=1 | tee make.log
    - if: failure()
      run: tar cfz msys-failure.tgz make.log src/config.h
    - if: failure()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: msys-failure.tgz
        path: msys-failure.tgz
  vs2019:
    runs-on: windows-2022
    timeout-minutes: 20
    steps:
    - name: checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - run: cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release .
    - run: cmake --build . --config Release
    - run: copy Release/libredwg.dll test/unit-testing/Release/
    - run: ctest . --output-on-failure
    # Create Windows MSVC artifacts
    - if: success()
      name: Create Windows MSVC artifact
      run: |
        mkdir msvc-build
        copy Release\*.dll msvc-build\
        copy Release\*.exe msvc-build\
        copy Release\*.lib msvc-build\
        tar czf libredwg-win64-msvc.tar.gz msvc-build
    - if: success()
      name: Upload Windows MSVC artifact
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: libredwg-win64-msvc
        path: libredwg-win64-msvc.tar.gz
    - if: failure()
      run: tar cfz msvc-failure.tgz Testing/Temporary/LastTest.log src/config.h
    - if: failure()
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: msvc-failure.tgz
        path: msvc-failure.tgz
  vs2019-ninja:
    runs-on: windows-2022
    timeout-minutes: 20
    #env:
    #  ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
    - name: checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 1
        submodules: recursive
    - uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0
    # - run: choco install ninja
      # use the preinstalled vcpkg from image
      # https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md#package-management
    #- name: Setup vcpkg
    #  uses: lukka/run-vcpkg@v11
    #  with:
    #    vcpkgDirectory: C:/vcpkg
    #    doNotUpdateVcpkg: true  # the preinstalled vcpkg is updated regularly
    #    vcpkgJsonGlob: 'vcpkg.json.in'
    - name: cmake -G "Ninja"
      shell: cmd
      run: |
        cmake -G "Ninja" . ^
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Release ^
          -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake ^
          -DVCPKG_TARGET_TRIPLET=x64-windows-static-release ^
          -DVERBOSE_CONFIGURE=ON ^
          -DCMAKE_CXX_COMPILER=cl ^
          -DCMAKE_C_COMPILER=cl
    - run: ninja
    - run: copy libredwg.dll test\unit-testing\
    - run: ctest . --output-on-failure

  # Aggregate all platform artifacts for releases
  release-artifacts:
    name: Release Artifacts
    # Run on tags or successful master builds
    if: |
      always() &&
      (startsWith(github.ref, 'refs/tags/') || (github.ref == 'refs/heads/master' && github.event_name == 'push')) &&
      !cancelled()
    needs: [ubuntu, fedora, debian, alpine, centos, macOS, mingw, vs2019]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout for version info
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      with:
        fetch-depth: 0  # Need full history for git-version-gen

    - name: Get version and build number
      id: version
      run: |
        VERSION=$(./build-aux/git-version-gen .tarball-version)
        BUILD_NUM=$(git rev-list --count HEAD)
        SHORT_SHA=$(git rev-parse --short HEAD)
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          RELEASE_NAME="Release $TAG_NAME"
          PRERELEASE=false
        else
          TAG_NAME="$VERSION.$BUILD_NUM"
          RELEASE_NAME="Nightly Build $VERSION.$BUILD_NUM ($SHORT_SHA)"
          PRERELEASE=true
        fi
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
        echo "Creating release: $RELEASE_NAME (tag: $TAG_NAME)"

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release checksums
      run: |
        cd artifacts
        sha256sum */*.tar.gz > checksums.sha256
        cat checksums.sha256

    - name: Create Release
      uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2.3.2
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        name: ${{ steps.version.outputs.release_name }}
        prerelease: ${{ steps.version.outputs.prerelease }}
        body: |
          LibreDWG ${{ steps.version.outputs.release_name }}

          Multi-platform builds for Linux, macOS, and Windows.

          ## Downloads
          - Linux builds: libredwg-linux-*.tar.gz
          - macOS builds: libredwg-macos-*.tar.gz
          - Windows MinGW: libredwg-win64-mingw.tar.gz
          - Windows MSVC: libredwg-win64-msvc.tar.gz

          See checksums.sha256 for file integrity verification.
        files: |
          artifacts/*/*.tar.gz
          artifacts/checksums.sha256
        fail_on_unmatched_files: false
